name: build push and deploy image

on:
  workflow_dispatch:
  #push:
  #  branches: [main]
  #pull_request:
  #  branches: [main]

permissions:
  id-token: write 
  contents: read

env:
  AWS_REGION: us-east-1
  AWS_ACTION_ROLE2: ${{ secrets.AWS_ACTION_ROLE2 }}
  ECR_REPO_NAME: dev
  IMAGE_TAG: ${{github.run_number}}
  TASK_DEFINITION: nginx-task
  ECS_CLUSTER: nginx-cluster
  ECS_SERVICE: nginx-service
  NEW_TASK_DEFINITION: nginx


jobs:
  Build:
    runs-on: ubuntu-latest  # github runner
    steps:
      - name: clone repo
        uses: actions/checkout@v4

      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -cs) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

      - name: scan the repo for misconfiguration
        run: trivy config .

      - name: AWS creds config
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{env.AWS_ACTION_ROLE2}} # OIDC connect
          aws-region: ${{env.AWS_REGION}}
      - name: login to ecr
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and tag image
        id: build-and-tag
        run:
          docker build -t ${{ steps.ecr-login.outputs.registry}}/${{env.ECR_REPO_NAME}}:${{ env.IMAGE_TAG}} .
      
      - name: scan docker Image for vulnerabilities
        #id: scan-docker
        uses: aquasecurity/trivy-action@master
        with:
            image-ref: ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME }}:${{ env.IMAGE_TAG }}
            format: 'table'
            exit-code: '0'  # Fail on vulnerabilities
            severity: 'CRITICAL,HIGH'

      - name: Push image to ECR
        run:
          docker push ${{steps.ecr-login.outputs.registry}}/${{env.ECR_REPO_NAME}}:${{env.IMAGE_TAG}}
      
      - name: store image in github env
        run: echo "Image=${{steps.ecr-login.outputs.registry}}/${{env.ECR_REPO_NAME}}:${{env.IMAGE_TAG}}" >> $GITHUB_ENV

  Deploy:
    runs-on: ubuntu-latest
    needs: Build    # Depends on Build job
    steps:
      - name: AWS Creds Config 
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ACTION_ROLE2 }}
          aws-region: ${{ env.AWS_REGION }}

      - name: login to ecr
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Download current task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.TASK_DEFINITION }} --query taskDefinition > task-definition.json
      
      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: task-definition.json

      - name: Update task definition with new ECR image
        run: |
          jq --arg IMAGE_URI "${{steps.ecr-login.outputs.registry}}/${{env.ECR_REPO_NAME}}:${{env.IMAGE_TAG}}" '
          .containerDefinitions[0].image = $IMAGE_URI |
          del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy, .deregisteredAt)
          ' task-definition.json > register-task-definition.json
   
      - name: Register new task definition
        run: |
          aws ecs register-task-definition --cli-input-json file://register-task-definition.json
          echo "NEW_TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition ${{ env.TASK_DEFINITION }} --query 'taskDefinition.taskDefinitionArn' --output text)" >> $GITHUB_ENV
      
      - name: Update ECS service
        run: |
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE }} --task-definition ${{ env.NEW_TASK_DEFINITION }} --force-new-deployment